// Author: Jefferson Giovanni D. Schneider - Email: bluedreams.code@outlook.com
// Date: 21/08/2023 - All rights reserved.
//
namespace IDGenerator
{
	public static class IDGenerator
	{
		/// <summary>
		/// Creates a string id with fixed length.
		/// The id is generated by getting a new Guid, removing
		/// the "-" part, and getting a ramdon substring with the length value
		/// from it.
		/// </summary>
		/// <param name="length">Integer with the total length</param>
		/// <returns>String</returns>
		public static string CreateStringIdWithFixedLength(int length)
		{
			var x = new Random();
			var suffix = Guid.NewGuid().ToString().Replace("-", string.Empty)
				.Substring(x.Next(1, 27), length).ToUpper();
			return suffix.ToUpper();
		}
		/// <summary>
		/// Creates a string id with fixed length.
		/// The id is generated by getting a new Guid, removing
		/// the "-" part, and getting a ramdon substring with the length value
		/// from it. Additionally, it inserts a string prefix to it. The resulting string
		/// is an interpolation of prefix + ramdon substring length generated.
		/// The generated string total length is the given length + the prefix length.
		/// </summary>
		/// <param name="length">Integer with the length</param>
		/// <param name="prefix">String with the prefix</param>
		/// <returns>String</returns>
		public static string CreateStringIdWithFixedLength(int length, string prefix)
		{
			var x = new Random();
			var suffix = Guid.NewGuid().ToString().Replace("-", string.Empty)
				.Substring(x.Next(1, 27), length).ToUpper();
			var result =  $"{prefix}{suffix}";
			return result.ToUpper();
		}
		/// <summary>
		/// Creates a string id with fixed length.
		/// The id is generated by getting a new Guid, removing
		/// the "-" part, and getting a ramdon substring with the length value
		/// from it. Additionally, it inserts a string prefix to it. The resulting string
		/// is an interpolation of prefix + ramdon substring length generated + suffix.
		/// The generated string total length is the given length + the prefix length + suffix length.
		/// </summary>
		/// <param name="length">Integer</param>
		/// <param name="prefix">String</param>
		/// <param name="suffix">String</param>
		/// <returns>String</returns>
		public static string CreateStringIdWithFixedLength(int length, string prefix, string suffix)
		{
			var x = new Random();
			var guid = Guid.NewGuid().ToString().Replace("-", string.Empty)
				.Substring(x.Next(1, 27), length).ToUpper();
			var result = $"{prefix}{guid}{suffix}";
			return result.ToUpper();
		}
		/// <summary>
		/// Generates a string representation of an id using a timespan in SECONDS
		/// from the given date to now.
		/// </summary>
		/// <param name="dateTime">DateTime</param>
		/// <returns>String</returns>
		public static string CreateStringIdFromTimeStampInSeconds(DateTime dateTime)
		{
			TimeSpan ts = DateTime.Now.Subtract(dateTime);
			var result = ts.TotalSeconds;
			int finalNumber = (int)result;
			return finalNumber.ToString();
		}
		/// <summary>
		/// Generates a string representation of an id using a timespan in MINUTES
		/// from the given date to now, and by adding a prefix string to it.
		/// </summary>
		/// <param name="date">DateTime</param>
		/// <param name="prefix">String</param>
		/// <returns>String</returns>
		public static string CreateStringIdWithPrefixAndTimeStampInMinutes(DateTime date, string prefix)
		{
			TimeSpan ts = DateTime.Now.Subtract(date);
			var value = ts.TotalMinutes;
			return $"{prefix}{value}";
		}
		/// <summary>
		/// Generates a string representation of an id using a timespan in SECONDS
		/// from the given date to now, and by adding a prefix string to it.		/// </summary>
		/// <param name="date"></param>
		/// <param name="prefix"></param>
		/// <returns></returns>
		public static string CreateStringIdWithPrefixAndTimeStampInSeconds(DateTime date, string prefix)
		{
			TimeSpan ts = DateTime.Now.Subtract(date);
			var value = ts.TotalSeconds;
			return $"{prefix}{value}";
		}


		/// <summary>
		/// Generates and id based on the timespan from a given date to this moment in SECONDS
		/// </summary>
		/// <param name="dateTime">DateTime</param>
		/// <returns>Integer</returns>
		public static int CreateIntegerIdFromTimeStampInSeconds(DateTime dateTime)
		{
			TimeSpan ts = DateTime.Now.Subtract(dateTime);
			var result = ts.TotalSeconds;
			int finalNumber = (int)result;
			return finalNumber;
		}
		/// <summary>
		/// Generates and id based on the timespan from a given date to this moment in MINUTES
		/// </summary>
		/// <param name="dateTime">DateTime</param>
		/// <returns>Integer</returns>
		public static int CreateIntegerIdFromTimeStampInMinutes(DateTime dateTime)
		{
			TimeSpan ts = DateTime.Now.Subtract(dateTime);
			var result = ts.TotalMinutes;
			int finalNumber = (int)result;
			return finalNumber;
		}

	}
}

